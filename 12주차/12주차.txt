16: 상속과 다형성
개인적으로 상속과 다형성 공부하실 분들은 아래에 목표와 학습내용 있습니다.

상속과 다형성
목표
1. 상속
    • 클래스 간의 상속 관계를 이해하고, 코드 재사용성을 높이며 확장 가능한 구조를 설계할 수 있다.
    • 부모 클래스의 속성과 메서드를 자식 클래스에서 재사용하고, 필요에 따라 확장하거나 재정의한다.

2. 다형성
    • 동일한 메서드 이름으로 다양한 객체에서 다른 동작을 구현하는 다형성의 개념을 이해한다.
    • 부모 클래스 타입의 참조 변수를 통해 자식 클래스의 메서드를 호출하는 방법을 익힌다.
    • 동적 메서드 호출을 활용하여 유연한 코드를 작성한다.
 

학습 내용
1. 상속
1.1 상속의 기본 개념
    • 클래스 상속 정의:
        • 부모 클래스(기본 클래스)와 자식 클래스(파생 클래스)의 관계를 정의.
        • 자식 클래스는 부모 클래스의 속성과 메서드를 상속받음.
----------------------------------------------------------------------
class Parent:
    pass

class Child(Parent):
    pass
----------------------------------------------------------------------

1.2 상속을 사용하는 이유
    • 코드 재사용: 공통 코드를 부모 클래스에 정의하고, 자식 클래스에서 재사용.
    • 확장성: 자식 클래스에서 부모 클래스의 기능을 확장 가능.
    • 계층적 설계: 복잡한 시스템을 계층적으로 설계하여 가독성 향상.

1.3 부모 클래스의 메서드 호출
    • super()를 사용하여 부모 클래스의 메서드나 생성자 호출.
----------------------------------------------------------------------
class Parent:
    def __init__(self, name):
        self.name = name

class Child(Parent):
    def __init__(self, name, age):
        super().__init__(name)  # 부모 클래스의 생성자 호출
        self.age = age
----------------------------------------------------------------------
 

1.4 메서드 오버라이딩
    • 자식 클래스에서 부모 클래스의 메서드를 재정의하여 다른 동작을 구현.
----------------------------------------------------------------------
class Parent:
    def greet(self):
        print("Hello from Parent")

class Child(Parent):
    def greet(self):
        print("Hello from Child")
----------------------------------------------------------------------

2. 다형성
2.1 다형성의 기본 개념
    • 하나의 부모 클래스 타입으로 여러 자식 클래스 객체를 처리할 수 있는 능력.
    • 공통된 인터페이스를 제공하여 다양한 객체의 동작을 통합.

2.2 메서드 오버라이딩을 활용한 다형성
    • 부모 클래스의 메서드를 자식 클래스에서 오버라이딩하여 서로 다른 동작을 구현.
--------------------------------------------------------------------------------
class Animal:
    def speak(self):
        pass

class Dog(Animal):
    def speak(self):
        return "Woof"

class Cat(Animal):
    def speak(self):
        return "Meow"

def animal_sound(animal):
    print(animal.speak())

dog = Dog()
cat = Cat()

animal_sound(dog)  # Woof
animal_sound(cat)  # Meow
--------------------------------------------------------------------------------

2.3 추상 클래스
    • 부모 클래스에서 메서드의 공통 인터페이스만 정의하고, 구체적인 구현은 자식 클래스에서 수행.
    • Python의 abc 모듈을 사용하여 구현
--------------------------------------------------------------------------------
from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2
--------------------------------------------------------------------------------

2.4 다형성을 활용한 동적 메서드 호출
    • 부모 클래스의 참조 변수를 사용하여 자식 클래스의 메서드를 동적으로 호출.
--------------------------------------------------------------------------------
shapes = [Circle(5), Square(4)]
for shape in shapes:
    print(shape.area())
--------------------------------------------------------------------------------

3. 상속과 다형성의 활용 사례 
3.1 공통 동작을 상속으로 정의
    • 부모 클래스에 공통 동작 정의.
    • 자식 클래스에서 공통 동작을 기반으로 특화된 동작 구현.

3.2 실무적 활용 예
    • GUI 구성 요소 설계:
        • 부모 클래스: Widget.
        • 자식 클래스: Button, TextBox, CheckBox.
        • 공통 인터페이스를 통해 다양한 위젯 처리.
    • 파일 시스템 설계:
        • 부모 클래스: File.
        • 자식 클래스: TextFile, ImageFile, AudioFile.
        • 파일 형식별로 다른 처리 구현.

3.3 상속과 다형성을 결합한 설계
    • 복잡한 계층 구조를 설계하고, 다형성을 통해 코드 중복 없이 동작 구현.

학습 정리
    • 상속을 통해 공통 기능을 재사용하고, 코드 중복을 줄이며 확장 가능성을 높인다.
    • 다형성을 활용하여 공통된 인터페이스로 다양한 객체를 처리하고, 유연한 코드를 작성한다.
    • 추상 클래스를 통해 강제적인 인터페이스 제공 및 다형성 구현을 연습한다.
    • 실무에서의 상속과 다형성 활용 사례를 통해 객체 지향 설계의 장점을 경험한다.