14: 클래스와 객체 지향 프로그래밍 기본

목표
   •   객체 지향 프로그래밍(OOP)의 기본 개념을 이해하고, 파이썬에서 클래스를 사용하여 객체 지향적 코드를 작성하는 방법을 익힌다.
   •   클래스와 객체의 관계를 이해하고, 이를 활용해 효율적이고 재사용 가능한 코드를 설계하는 능력을 기른다.

학습 내용
1. 객체 지향 프로그래밍(OOP)의 기본 개념
   •   OOP란 무엇인가?
   •   객체 지향 프로그래밍의 정의와 필요성 이해.
   •   절차 지향 프로그래밍과의 차이점 및 OOP의 장점 학습.
   •   OOP의 주요 특징
   •   추상화: 복잡한 시스템을 단순화하여 중요한 부분만 표현.
   •   캡슐화: 데이터와 메서드를 하나의 객체로 묶고, 외부에서 접근을 제한.
   •   상속: 기존 클래스의 기능을 재사용하고 확장.
   •   다형성: 동일한 인터페이스로 다양한 객체를 처리.

2. 클래스와 객체의 개념
   •   클래스와 객체
   •   클래스는 객체를 생성하기 위한 설계도이고, 객체는 클래스의 인스턴스라는 개념 이해.
   •   클래스와 객체의 관계를 실생활 예제(예: 자동차 클래스와 자동차 객체)로 학습.
   •   클래스 정의
   •   class 키워드를 사용하여 클래스 정의.
   •   클래스 내 속성(데이터)과 메서드(함수) 작성.
   •   객체 생성
   •   클래스의 인스턴스(객체)를 생성하고, 속성과 메서드에 접근하는 방법.

3. 클래스 구성 요소
   •   속성 (Attributes)
   •   클래스 속성과 인스턴스 속성의 차이 이해.
   •   __init__() 메서드를 사용해 인스턴스 속성을 초기화.
   •   메서드 (Methods)
   •   클래스 내부에 정의된 함수 작성.
   •   인스턴스 메서드와 클래스 메서드의 차이 이해.
   •   self 키워드를 사용해 인스턴스 속성과 메서드에 접근.
   •   특수 메서드 (Magic Methods)
   •   __str__(), __repr__(), __eq__(), __lt__() 등의 특수 메서드를 사용하여 클래스의 동작을 사용자 정의.

4. 객체 간 상호작용
   •   객체 간 관계
   •   객체가 서로 다른 객체를 참조하거나 메시지를 전달하는 상호작용 학습.
   •   예: 학생 객체와 수업 객체 간의 관계 구현.
   •   캡슐화
   •   속성과 메서드를 외부에서 접근할 수 없도록 보호.
   •   접근 제한자(_, __)를 사용하여 프라이빗 속성을 구현.

5. 클래스 상속과 다형성
   •   상속 (Inheritance)
   •   기존 클래스를 확장하여 새로운 클래스를 생성하는 방법.
   •   부모 클래스와 자식 클래스의 관계를 정의하고, 자식 클래스에서 메서드 오버라이딩 학습.
   •   다형성 (Polymorphism)
   •   동일한 메서드 이름으로 다양한 동작을 구현.
   •   추상 클래스를 사용하여 공통 인터페이스 설계.